import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';

interface AfricanCountry {
  code: string;
  name: string;
  flag: string;
}

@Component({
  selector: 'app-nationality-selection',
  standalone: false,
  templateUrl: './nationality-selection.component.html',
  styleUrls: ['./nationality-selection.component.scss']
})
export class NationalitySelectionComponent implements OnInit {
  nationalityForm: FormGroup;
  isLoading: boolean = false;
  detectedCountry: string = '';
   selectedCountryName: string = '';
  selectedCountryFlag: string = '';

  // Liste compl√®te des pays africains
  africanCountries: AfricanCountry[] = [
    { code: 'DZ', name: 'Alg√©rie', flag: 'üá©üáø' },
    { code: 'AO', name: 'Angola', flag: 'üá¶üá¥' },
    { code: 'BJ', name: 'B√©nin', flag: 'üáßüáØ' },
    { code: 'BW', name: 'Botswana', flag: 'üáßüáº' },
    { code: 'BF', name: 'Burkina Faso', flag: 'üáßüá´' },
    { code: 'BI', name: 'Burundi', flag: 'üáßüáÆ' },
    { code: 'CM', name: 'Cameroun', flag: 'üá®üá≤' },
    { code: 'CV', name: 'Cap-Vert', flag: 'üá®üáª' },
    { code: 'CF', name: 'R√©publique centrafricaine', flag: 'üá®üá´' },
    { code: 'TD', name: 'Tchad', flag: 'üáπüá©' },
    { code: 'KM', name: 'Comores', flag: 'üá∞üá≤' },
    { code: 'CG', name: 'R√©publique du Congo', flag: 'üá®üá¨' },
    { code: 'CD', name: 'R√©publique d√©mocratique du Congo', flag: 'üá®üá©' },
    { code: 'CI', name: "C√¥te d'Ivoire", flag: 'üá®üáÆ' },
    { code: 'DJ', name: 'Djibouti', flag: 'üá©üáØ' },
    { code: 'EG', name: '√âgypte', flag: 'üá™üá¨' },
    { code: 'GQ', name: 'Guin√©e √©quatoriale', flag: 'üá¨üá∂' },
    { code: 'ER', name: '√ârythr√©e', flag: 'üá™üá∑' },
    { code: 'SZ', name: 'Eswatini', flag: 'üá∏üáø' },
    { code: 'ET', name: '√âthiopie', flag: 'üá™üáπ' },
    { code: 'GA', name: 'Gabon', flag: 'üá¨üá¶' },
    { code: 'GM', name: 'Gambie', flag: 'üá¨üá≤' },
    { code: 'GH', name: 'Ghana', flag: 'üá¨üá≠' },
    { code: 'GN', name: 'Guin√©e', flag: 'üá¨üá≥' },
    { code: 'GW', name: 'Guin√©e-Bissau', flag: 'üá¨üáº' },
    { code: 'KE', name: 'Kenya', flag: 'üá∞üá™' },
    { code: 'LS', name: 'Lesotho', flag: 'üá±üá∏' },
    { code: 'LR', name: 'Lib√©ria', flag: 'üá±üá∑' },
    { code: 'LY', name: 'Libye', flag: 'üá±üáæ' },
    { code: 'MG', name: 'Madagascar', flag: 'üá≤üá¨' },
    { code: 'MW', name: 'Malawi', flag: 'üá≤üáº' },
    { code: 'ML', name: 'Mali', flag: 'üá≤üá±' },
    { code: 'MR', name: 'Mauritanie', flag: 'üá≤üá∑' },
    { code: 'MU', name: 'Maurice', flag: 'üá≤üá∫' },
    { code: 'MA', name: 'Maroc', flag: 'üá≤üá¶' },
    { code: 'MZ', name: 'Mozambique', flag: 'üá≤üáø' },
    { code: 'NA', name: 'Namibie', flag: 'üá≥üá¶' },
    { code: 'NE', name: 'Niger', flag: 'üá≥üá™' },
    { code: 'NG', name: 'Nig√©ria', flag: 'üá≥üá¨' },
    { code: 'RW', name: 'Rwanda', flag: 'üá∑üáº' },
    { code: 'ST', name: 'Sao Tom√©-et-Principe', flag: 'üá∏üáπ' },
    { code: 'SN', name: 'S√©n√©gal', flag: 'üá∏üá≥' },
    { code: 'SC', name: 'Seychelles', flag: 'üá∏üá®' },
    { code: 'SL', name: 'Sierra Leone', flag: 'üá∏üá±' },
    { code: 'SO', name: 'Somalie', flag: 'üá∏üá¥' },
    { code: 'ZA', name: 'Afrique du Sud', flag: 'üáøüá¶' },
    { code: 'SS', name: 'Soudan du Sud', flag: 'üá∏üá∏' },
    { code: 'SD', name: 'Soudan', flag: 'üá∏üá©' },
    { code: 'TZ', name: 'Tanzanie', flag: 'üáπüáø' },
    { code: 'TG', name: 'Togo', flag: 'üáπüá¨' },
    { code: 'TN', name: 'Tunisie', flag: 'üáπüá≥' },
    { code: 'UG', name: 'Ouganda', flag: 'üá∫üá¨' },
    { code: 'ZM', name: 'Zambie', flag: 'üáøüá≤' },
    { code: 'ZW', name: 'Zimbabwe', flag: 'üáøüáº' }
  ];


  constructor(
     private fb: FormBuilder,
    private router: Router
  ) {
    this.nationalityForm = this.fb.group({
      nationality: ['', Validators.required]
    });
  }

  ngOnInit() {
    // R√©cup√©rer le pays de r√©sidence depuis les donn√©es temporaires
    const tempData = localStorage.getItem('tempPhone');
    if (tempData) {
      const phoneData = JSON.parse(tempData);
      this.detectedCountry = this.getCountryNameFromCode(phoneData.countryCode);
    } else {
      // Si pas de donn√©es, retour √† l'√©cran t√©l√©phone
      this.router.navigate(['/auth/phone']);
    }

    this.nationalityForm.get('nationality')?.valueChanges.subscribe(value => {
      this.updateSelectedCountryInfo(value);
    
    })
  }

  // Mettre √† jour les informations du pays s√©lectionn√©
  updateSelectedCountryInfo(countryCode: string) {
    if (countryCode) {
      const country = this.africanCountries.find(c => c.code === countryCode);
      this.selectedCountryName = country?.name || '';
      this.selectedCountryFlag = country?.flag || '';
    } else {
      this.selectedCountryName = '';
      this.selectedCountryFlag = '';
    }
  }

   onNationalityChange() {
    // Cette m√©thode est appel√©e quand la s√©lection change
    console.log('Nationalit√© s√©lectionn√©e:', this.nationalityForm.get('nationality')?.value);
  }

  // S√©lectionner un pays
  selectCountry(country: AfricanCountry) {
    this.nationalityForm.patchValue({
      nationality: country.code
    });
  }

  // Soumission du formulaire
  onSubmit() {
  if (this.nationalityForm.valid) {
    this.isLoading = true;

    // R√©cup√©rer les donn√©es existantes
    const tempData = localStorage.getItem('tempPhone');
    if (tempData) {
      const phoneData = JSON.parse(tempData);
      
      // TROUVER LE PAYS S√âLECTIONN√â
      const selectedCountry = this.africanCountries.find(
        c => c.code === this.nationalityForm.get('nationality')?.value
      );
      
      if (!selectedCountry) {
        alert('‚ùå Pays non trouv√©');
        this.isLoading = false;
        return;
      }

      // ‚ö†Ô∏è CORRECTION : Cr√©er l'objet COMPLET avec toutes les propri√©t√©s
      const userData = {
        phoneNumber: `${phoneData.countryCode}${phoneData.phoneNumber.replace(/\s/g, '')}`,
        countryCode: phoneData.countryCode,
        countryName: this.detectedCountry, // ‚¨ÖÔ∏è IMPORTANT
        nationality: this.nationalityForm.get('nationality')?.value,
        nationalityName: selectedCountry.name // ‚¨ÖÔ∏è IMPORTANT
      };

      console.log('üåç Donn√©es utilisateur COMPL√àTES:', userData);

      // Stocker les donn√©es compl√®tes
      localStorage.setItem('userRegistrationData', JSON.stringify(userData));

      // Simulation traitement
      setTimeout(() => {
        this.isLoading = false;
        this.router.navigate(['/auth/profile']);
      }, 1000);
    } else {
      this.isLoading = false;
      alert('‚ùå Donn√©es t√©l√©phone non trouv√©es');
      this.router.navigate(['/auth/phone']);
    }
  }
}

  goBack() {
    this.router.navigate(['/auth/phone']);
  }

  // Helper pour obtenir le nom du pays depuis le code
  private getCountryNameFromCode(code: string): string {
    const countries: {[key: string]: string} = {
      '+33': 'France',
      '+32': 'Belgique', 
      '+49': 'Allemagne',
      '+39': 'Italie',
      '+34': 'Espagne',
      '+41': 'Suisse',
      '+44': 'Royaume-Uni',
      '+1': 'Canada',
      '+7': 'Russie',
      '+375': 'Bi√©lorussie'
    };
    return countries[code] || 'Pays inconnu';
  }
}